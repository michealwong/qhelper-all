////////////////////////////////////////////////////////////////////////
//
// sapTest.cpp
//
// This file was generated by XMLSpy 2010r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "../sap/sap.h"
using namespace std;



#ifdef _DEBUG

	#undef THIS_FILE
	static char THIS_FILE[] = __FILE__;
#endif


void Example()
{
	////////////////////////////////////////////////////////////////////
	//
	// TODO:
	//   Insert your code here...
	//
	// Example code to create and save a structure:
	//   sap::Csap doc = sap::Csap::CreateDocument();
	//   sap::CsaprootType root = doc.saproot.append();
	//   ...
	//   doc.SetSchemaLocation(_T("D:/projects/svn/sap/util/result_xml/sap.xsd")); // optional
	//   doc.SaveToFile(_T("sap1.xml"), true);
	//
	// Example code to load and save a structure:
	//   sap::Csap doc = sap::Csap::LoadFromFile(_T("sap1.xml"));
	//   sap::CsaprootType root = doc.saproot.first();
	//   ...
	//   doc.SaveToFile(_T("sap1.xml"), true);
	//
	////////////////////////////////////////////////////////////////////
}

#if defined( __GNUC__ )
int main(int argc, char* argv[])
#else
int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
#endif
{
	tcout << _T("sap Test Application") << endl;

	try
	{
		xercesc::XMLPlatformUtils::Initialize();

		Example();

		xercesc::XMLPlatformUtils::Terminate();

		tcout << _T("OK") << endl;
		return 0;
	}
	catch (CXmlException& e)
	{
		tcerr << _T("Error: ") << e.GetInfo().c_str() << endl;
		return 1;
	}
	catch (xercesc::XMLException& e)
	{
		tcerr << _T("Xerces XMLException: ") << e.getSrcFile() << _T("(")
			  << e.getSrcLine() << _T("): ") << e.getMessage() << endl;
		return 1;
	}
	catch (xercesc::DOMException& e)
	{
		tcerr << _T("Xerces DOMException ") << e.code;
		if (e.msg)
			tcerr << _T(": ") << e.msg;
		tcerr << endl;
		return 1;
	}
	catch (altova::Exception& exception)
	{
		tcerr << "Exception: " << exception.message() << endl;
		return 1;
	}
	catch (altova::Error& exception)
	{
		tcerr << "Error: " << exception.message() << endl;
		return 1;
	}
	catch (std::exception& e)
	{
		cerr << "Exception: " << e.what() << endl;
		return 1;
	}
	catch (...)
	{
		tcerr << _T("Unknown error") << endl;
		return 1;
	}
}
